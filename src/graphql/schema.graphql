input StringFieldUpdateOperationsInput {
  set: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BooksUpdateInput {
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  link: StringFieldUpdateOperationsInput
  pages: StringFieldUpdateOperationsInput
  readedPages: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  finished: BoolFieldUpdateOperationsInput
  translations: [BooksTranslationsUpdateManyWithoutBooksInput]
}

input BooksTranslationsUpdateManyWithoutBooksInput {
  update: [BooksTranslationsUpdateWithWhereUniqueWithoutBooksInput]
  upsert: [BooksTranslationsUpsertWithWhereUniqueWithoutBooksInput]
}

input BooksTranslationsUpdateWithWhereUniqueWithoutBooksInput {
  where: BooksTranslationsWhereUniqueInput
  data: BooksTranslationsUpdateWithoutBooksDataInput
}

input BooksTranslationsUpsertWithWhereUniqueWithoutBooksInput {
  where: BooksTranslationsWhereUniqueInput
  update: BooksTranslationsUpdateWithoutBooksDataInput
  create: BooksTranslationsCreateWithoutBooksInput
}

input BooksTranslationsUpdateWithoutBooksDataInput {
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  author: StringFieldUpdateOperationsInput
}

input BooksTranslationsCreateWithoutBooksInput {
  title: String
  description: String
  author: String
  languageCode: String
}

input BooksWhereUniqueInput {
  id: String
}

type Mutation {
  createBook(data: CreateBookInput!): Book
  deleteOneBooks(where: BooksWhereUniqueInput!): Book
  updateOneBooks(data: BooksUpdateInput!, where: BooksWhereUniqueInput!): Book
}

type Book {
  id: String
  image: String
  link: String
  pages: Int
  readedPages: Int
  type: String
  finished: Boolean
  translations: [BookTranslation]
}

type BookTranslation {
  id: String
  title: String
  description: String
  author: String
  languageCode: String
}

input CreateBookInput {
  image: String
  link: String
  pages: Int
  readedPages: Int
  type: String
  finished: Boolean
  translations: [BooksTranslationsCreateWithoutBooksInput]
}

input BlogsTranslationCreateInput {
  headline: String!
  about: String!
  languageCode: String!
}

input BlogsCreateInput {
  link: String!
  background: String!
  translations: [BlogsTranslationCreateInput!]!
}

type Mutation {
  createOneBlogs(data: BlogsCreateInput!): Blog!
}

type Blog {
  id: ID!
  link: String!
  background: String!
  translations: [BlogsTranslation!]!
}

type BlogsTranslation {
  id: ID!
  headline: String!
  about: String!
  languageCode: String!
}

input ArchiveCreateInput {
  link: String!
  github: String!
  background: String!
  isReal: Boolean!
  skills: [String!]
  translations: [ArchiveTranslationsCreateWithoutArchiveInput!]!
}

input ArchiveTranslationsCreateWithoutArchiveInput {
  languageCode: String!
  description: String!
  name: String!
  location: String!
}

input ArchiveUpdateInput {
  link: StringFieldUpdateOperationsInput
  github: StringFieldUpdateOperationsInput
  background: StringFieldUpdateOperationsInput
  isReal: BoolFieldUpdateOperationsInput
  skills: String
  translations: ArchiveTranslationsUpdateManyWithoutArchiveInput
}

input ArchiveTranslationsUpdateManyWithoutArchiveInput {
  update: [ArchiveTranslationsUpdateWithWhereUniqueWithoutArchiveInput]
  upsert: [ArchiveTranslationsUpsertWithWhereUniqueWithoutArchiveInput]
}

input ArchiveTranslationsUpdateWithWhereUniqueWithoutArchiveInput {
  where: ArchiveTranslationsWhereUniqueInput
  data: ArchiveTranslationsUpdateWithoutArchiveDataInput
}

input ArchiveTranslationsUpsertWithWhereUniqueWithoutArchiveInput {
  where: ArchiveTranslationsWhereUniqueInput
  update: ArchiveTranslationsUpdateWithoutArchiveDataInput
  create: ArchiveTranslationsCreateWithoutArchiveInput
}

input ArchiveTranslationsUpdateWithoutArchiveDataInput {
  languageCode: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
}

input ArchiveTranslationsWhereUniqueInput {
  id: String
}

input ArchiveWhereUniqueInput {
  id: String
}

type Mutation {
  createOneArchive(data: ArchiveCreateInput!): Archive!
  deleteOneArchive(where: ArchiveWhereUniqueInput!): Archive
  updateOneArchive(
    data: ArchiveUpdateInput!
    where: ArchiveWhereUniqueInput!
  ): Archive
}

type Archive {
  id: String
  link: String
  github: String
  background: String
  isReal: Boolean
  skills: [String]
  translations: [ArchiveTranslation]
  createdAt: DateTime
  updatedAt: DateTime
}

type ArchiveTranslation {
  id: String
  languageCode: String
  description: String
  name: String
  location: String
}

type MainProjects {
  id: ID!
  link: String!
  github: String!
  background: String
  images: [String!]
  video: [String!]
  mobileBackgrounds: [String!]
  skills: [String!]!
  isReal: Boolean!
  translations: [MainProjectsTranslations!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MainProjectsTranslations {
  id: ID!
  languageCode: String!
  description: String!
  name: String!
  markdown: String!
  about: String!
  location: String!
  mainProjectsId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MainProjectsCreateInput {
  link: String!
  github: String!
  background: String
  images: [String!]
  video: [String!]
  mobileBackgrounds: [String!]
  skills: [String!]!
  isReal: Boolean!
  translations: [MainProjectsTranslationsCreateInput!]!
}

input MainProjectsUpdateInput {
  link: String
  github: String
  background: String
  images: [String!]
  video: [String!]
  mobileBackgrounds: [String!]
  skills: [String!]
  isReal: Boolean
  translations: [MainProjectsTranslationsUpdateInput!]
}

input MainProjectsTranslationsCreateInput {
  languageCode: String!
  description: String!
  name: String!
  markdown: String!
  about: String!
  location: String!
}

input MainProjectsTranslationsUpdateInput {
  description: String
  name: String
  markdown: String
  about: String
  location: String
}

type Query {
  findManyMainProjects(
    orderBy: [MainProjectOrderByWithRelationInput!]
    where: MainProjectInputWhereInput
  ): [MainProjects!]!
}

type Mutation {
  createOneMainProjects(data: MainProjectsCreateInput!): MainProjects!
  updateOneMainProjects(
    data: MainProjectsUpdateInput!
    where: ID!
  ): MainProjects!
  deleteOneMainProjects(where: ID!): MainProjects!
}

scalar DateTime

input MainProjectOrderByWithRelationInput {
  createdAt: OrderByInput
  updatedAt: OrderByInput
}

input MainProjectInputWhereInput {
  link: StringFilter
  github: StringFilter
  background: StringFilter
  skills: StringListFilter
  isReal: BooleanFilter
}

input StringFilter {
  equals: String
  contains: String
  startsWith: String
  endsWith: String
}

input StringListFilter {
  has: String
}

input BooleanFilter {
  equals: Boolean
}

enum OrderByInput {
  asc
  desc
}
